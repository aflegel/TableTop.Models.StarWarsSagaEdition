// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using StarWarsSagaEdition.Models;

namespace StarWarsSagaEdition.Migrations
{
    [DbContext(typeof(StarWarsSagaEditionCharacterBuilderContext))]
    partial class StarWarsSagaEditionCharacterBuilderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview1-28290")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StarWarsSagaEdition.Models.Ability", b =>
                {
                    b.Property<int>("AbilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ability_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(15);

                    b.HasKey("AbilityId");

                    b.ToTable("ability");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Armour", b =>
                {
                    b.Property<int>("ArmourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("armour_id");

                    b.Property<int?>("AdditionalUpgrade")
                        .HasColumnName("additional_upgrade");

                    b.Property<int?>("ArmourTypeId")
                        .HasColumnName("armour_type_id");

                    b.Property<int?>("AvailabilityId")
                        .HasColumnName("availability_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<int?>("FortitudeBonus")
                        .HasColumnName("fortitude_bonus");

                    b.Property<int?>("HelmetId")
                        .HasColumnName("helmet_id");

                    b.Property<bool?>("Jetpack")
                        .HasColumnName("jetpack");

                    b.Property<int?>("MaximumDexterity")
                        .HasColumnName("maximum_dexterity");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.Property<bool?>("Rare")
                        .HasColumnName("rare");

                    b.Property<int?>("ReflexBonus")
                        .HasColumnName("reflex_bonus");

                    b.Property<decimal?>("Weight")
                        .HasColumnName("weight");

                    b.HasKey("ArmourId");

                    b.HasIndex("ArmourTypeId");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("BookId");

                    b.HasIndex("HelmetId");

                    b.ToTable("armour");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.ArmourHelmet", b =>
                {
                    b.Property<int>("HelmetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("helmet_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(50);

                    b.HasKey("HelmetId");

                    b.ToTable("armourHelmet");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.ArmourTemplate", b =>
                {
                    b.Property<int>("ArmourTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("armour_template_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.HasKey("ArmourTemplateId");

                    b.HasIndex("BookId");

                    b.ToTable("armourTemplate");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.ArmourType", b =>
                {
                    b.Property<int>("ArmourTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("armour_type_id");

                    b.Property<int?>("CheckPenalty")
                        .HasColumnName("check_penalty");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(50);

                    b.HasKey("ArmourTypeId");

                    b.ToTable("armourType");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Availability", b =>
                {
                    b.Property<int>("AvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("availability_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Licensing")
                        .HasColumnName("licensing");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("AvailabilityId");

                    b.ToTable("availability");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Background", b =>
                {
                    b.Property<int>("BackgroundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("background_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.HasKey("BackgroundId");

                    b.ToTable("background");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Beast", b =>
                {
                    b.Property<int>("BeastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("beast_id");

                    b.Property<int?>("AvailabilityId")
                        .HasColumnName("availability_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.HasKey("BeastId");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("BookId");

                    b.ToTable("beast");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("book_id");

                    b.Property<int?>("PageCount")
                        .HasColumnName("page_count");

                    b.Property<DateTime?>("Published")
                        .HasColumnName("published")
                        .HasColumnType("date");

                    b.Property<string>("ShortTitle")
                        .HasColumnName("short_title")
                        .HasMaxLength(20);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasMaxLength(100);

                    b.HasKey("BookId");

                    b.ToTable("book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("character_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.Property<int?>("SpeciesId")
                        .HasColumnName("species_id");

                    b.HasKey("CharacterId");

                    b.HasIndex("BookId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("character");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("class_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int?>("PageNumber")
                        .HasColumnName("page_number");

                    b.Property<bool?>("Prestige")
                        .HasColumnName("prestige");

                    b.Property<bool?>("Tradition")
                        .HasColumnName("tradition");

                    b.HasKey("ClassId");

                    b.HasIndex("BookId");

                    b.ToTable("class");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.ClassBonusFeatMap", b =>
                {
                    b.Property<int>("BonusFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bonus_feat_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<int?>("ClassId")
                        .HasColumnName("class_id");

                    b.Property<int?>("FeatId")
                        .HasColumnName("feat_id");

                    b.Property<int?>("PageNumber")
                        .HasColumnName("page_number");

                    b.HasKey("BonusFeatId");

                    b.HasIndex("BookId");

                    b.HasIndex("ClassId");

                    b.HasIndex("FeatId");

                    b.ToTable("classBonusFeatMap");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.ClassPrestigeSpecial", b =>
                {
                    b.Property<int>("ClassPrestigeSpecialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("class_prestige_special_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<int?>("ClassId")
                        .HasColumnName("class_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.HasKey("ClassPrestigeSpecialId");

                    b.HasIndex("BookId");

                    b.HasIndex("ClassId");

                    b.ToTable("classPrestigeSpecial");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.ClassSkillMap", b =>
                {
                    b.Property<int>("ClassSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("class_skill_id");

                    b.Property<int?>("ClassId")
                        .HasColumnName("class_id");

                    b.Property<int?>("SkillId")
                        .HasColumnName("skill_id");

                    b.HasKey("ClassSkillId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SkillId");

                    b.ToTable("classSkillMap");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.ClassTalentTreeMap", b =>
                {
                    b.Property<int>("ClassTreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("class_tree_id");

                    b.Property<int?>("ClassId")
                        .HasColumnName("class_id");

                    b.Property<int?>("TalentTreeId")
                        .HasColumnName("talent_tree_id");

                    b.HasKey("ClassTreeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("TalentTreeId");

                    b.ToTable("classTalentTreeMap");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Droid", b =>
                {
                    b.Property<int>("DroidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("droid_id");

                    b.Property<int?>("AvailabilityId")
                        .HasColumnName("availability_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost");

                    b.Property<int?>("Degree")
                        .HasColumnName("degree");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.Property<decimal?>("Weight")
                        .HasColumnName("weight");

                    b.HasKey("DroidId");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("BookId");

                    b.ToTable("droid");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.DroidSystem", b =>
                {
                    b.Property<int>("DroidSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("droid_system_id");

                    b.Property<int>("DroidId")
                        .HasColumnName("droid_id");

                    b.Property<int>("EquipmentDroidId")
                        .HasColumnName("equipment_droid_id");

                    b.Property<int?>("Quantity")
                        .HasColumnName("quantity");

                    b.HasKey("DroidSystemId");

                    b.HasIndex("DroidId");

                    b.HasIndex("EquipmentDroidId");

                    b.ToTable("droidSystem");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("equipment_id");

                    b.Property<int?>("AvailabilityId")
                        .HasColumnName("availability_id");

                    b.Property<bool?>("BodySlot")
                        .HasColumnName("body_slot");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<bool?>("HeadSlot")
                        .HasColumnName("head_slot");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(75);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.Property<decimal?>("Weight")
                        .HasColumnName("weight");

                    b.HasKey("EquipmentId");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("BookId");

                    b.ToTable("equipment");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.EquipmentCybernetic", b =>
                {
                    b.Property<int>("EquipmentCyberneticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("equipment_cybernetic_id");

                    b.Property<int?>("AvailabilityId")
                        .HasColumnName("availability_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.Property<decimal?>("Weight")
                        .HasColumnName("weight");

                    b.HasKey("EquipmentCyberneticId");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("BookId");

                    b.ToTable("equipmentCybernetic");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.EquipmentDroid", b =>
                {
                    b.Property<int>("EquipmentDroidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("equipment_droid_id");

                    b.Property<int?>("AvailabilityId")
                        .HasColumnName("availability_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<bool?>("Detachable")
                        .HasColumnName("detachable");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.Property<decimal?>("Weight")
                        .HasColumnName("weight");

                    b.HasKey("EquipmentDroidId");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("BookId");

                    b.ToTable("equipmentDroid");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.EquipmentUpgrade", b =>
                {
                    b.Property<int>("EquipmentUpgradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("equipment_upgrade_id");

                    b.Property<bool?>("ArmorUpgrade")
                        .HasColumnName("armor_upgrade");

                    b.Property<int?>("AvailabilityId")
                        .HasColumnName("availability_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.Property<int?>("UpgradeSlots")
                        .HasColumnName("upgrade_slots");

                    b.Property<bool?>("WeaponUpgrade")
                        .HasColumnName("weapon_upgrade");

                    b.Property<decimal?>("Weight")
                        .HasColumnName("weight");

                    b.HasKey("EquipmentUpgradeId");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("BookId");

                    b.ToTable("equipmentUpgrade");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Feat", b =>
                {
                    b.Property<int>("FeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("feat_id");

                    b.Property<bool?>("Asterix")
                        .HasColumnName("asterix");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<bool?>("Combat")
                        .HasColumnName("combat");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("DescriptionShort")
                        .HasColumnName("description_short")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int?>("PageNumber")
                        .HasColumnName("page_number");

                    b.HasKey("FeatId");

                    b.HasIndex("BookId");

                    b.ToTable("feat");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.ForcePower", b =>
                {
                    b.Property<int>("ForcePowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("force_power_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<bool?>("DarkSide")
                        .HasColumnName("dark_side");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<bool?>("LightSide")
                        .HasColumnName("light_side");

                    b.Property<bool?>("LightsaberForm")
                        .HasColumnName("lightsaber_form");

                    b.Property<bool?>("MindAffecting")
                        .HasColumnName("mind_affecting");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.Property<bool?>("Telekenetic")
                        .HasColumnName("telekenetic");

                    b.HasKey("ForcePowerId");

                    b.HasIndex("BookId");

                    b.ToTable("forcePower");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.ForceSecret", b =>
                {
                    b.Property<int>("ForceSecretId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("force_secret_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.HasKey("ForceSecretId");

                    b.HasIndex("BookId");

                    b.ToTable("forceSecret");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.ForceTechnique", b =>
                {
                    b.Property<int>("ForceTechniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("force_technique_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.HasKey("ForceTechniqueId");

                    b.HasIndex("BookId");

                    b.ToTable("forceTechnique");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Index", b =>
                {
                    b.Property<int>("IndexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("index_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.HasKey("IndexId");

                    b.HasIndex("BookId");

                    b.ToTable("index");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("LanguageId");

                    b.ToTable("language");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Level", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("level_id");

                    b.Property<bool?>("AbilityIncrease")
                        .HasColumnName("ability_increase");

                    b.Property<int?>("BaseCredits")
                        .HasColumnName("base_credits");

                    b.Property<int?>("BaseExperience")
                        .HasColumnName("base_experience");

                    b.Property<int?>("ChallengeExperience")
                        .HasColumnName("challenge_experience");

                    b.Property<string>("ChallengeLevel")
                        .HasColumnName("challenge_level")
                        .HasMaxLength(50);

                    b.Property<bool?>("FeatIncrease")
                        .HasColumnName("feat_increase");

                    b.HasKey("LevelId");

                    b.ToTable("level");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.MedicalSecret", b =>
                {
                    b.Property<int>("MedicalSecretId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("medical_secret_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.HasKey("MedicalSecretId");

                    b.HasIndex("BookId");

                    b.ToTable("medicalSecret");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Planet", b =>
                {
                    b.Property<int>("PlanetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("planet_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.HasKey("PlanetId");

                    b.HasIndex("BookId");

                    b.ToTable("planet");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.PrerequisiteAbility", b =>
                {
                    b.Property<int>("PrerequisiteAbilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("prerequisite_ability_id");

                    b.Property<int?>("ClassId")
                        .HasColumnName("class_id");

                    b.Property<int?>("FeatId")
                        .HasColumnName("feat_id");

                    b.Property<int>("RequiredAbilityId")
                        .HasColumnName("required_ability_id");

                    b.Property<int?>("RequiredScore")
                        .HasColumnName("required_score");

                    b.Property<int?>("TalentId")
                        .HasColumnName("talent_id");

                    b.HasKey("PrerequisiteAbilityId");

                    b.HasIndex("ClassId");

                    b.HasIndex("FeatId");

                    b.HasIndex("RequiredAbilityId");

                    b.HasIndex("TalentId");

                    b.ToTable("prerequisiteAbility");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.PrerequisiteFeat", b =>
                {
                    b.Property<int>("PrerequisiteFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("prerequisite_feat_id");

                    b.Property<int?>("ClassId")
                        .HasColumnName("class_id");

                    b.Property<int?>("FeatId")
                        .HasColumnName("feat_id");

                    b.Property<int>("RequiredFeatId")
                        .HasColumnName("required_feat_id");

                    b.Property<int?>("TalentId")
                        .HasColumnName("talent_id");

                    b.HasKey("PrerequisiteFeatId");

                    b.HasIndex("ClassId");

                    b.HasIndex("FeatId");

                    b.HasIndex("RequiredFeatId");

                    b.HasIndex("TalentId");

                    b.ToTable("prerequisiteFeat");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.PrerequisiteLevel", b =>
                {
                    b.Property<int>("PrerequisiteLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("prerequisite_level_id");

                    b.Property<bool>("BaseAttack")
                        .HasColumnName("base_attack");

                    b.Property<int?>("ClassId")
                        .HasColumnName("class_id");

                    b.Property<bool>("DarkSideScore")
                        .HasColumnName("dark_side_score");

                    b.Property<int?>("FeatId")
                        .HasColumnName("feat_id");

                    b.Property<int>("RequiredLevelId")
                        .HasColumnName("required_level_id");

                    b.Property<int?>("TalentId")
                        .HasColumnName("talent_id");

                    b.HasKey("PrerequisiteLevelId");

                    b.HasIndex("ClassId");

                    b.HasIndex("FeatId");

                    b.HasIndex("RequiredLevelId");

                    b.HasIndex("TalentId");

                    b.ToTable("prerequisiteLevel");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.PrerequisiteSize", b =>
                {
                    b.Property<int>("PrerequisiteSizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("prerequisite_size_id");

                    b.Property<int?>("ClassId")
                        .HasColumnName("class_id");

                    b.Property<int?>("FeatId")
                        .HasColumnName("feat_id");

                    b.Property<int>("RequiredSideId")
                        .HasColumnName("required_side_id");

                    b.Property<int?>("TalentId")
                        .HasColumnName("talent_id");

                    b.HasKey("PrerequisiteSizeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("FeatId");

                    b.HasIndex("RequiredSideId");

                    b.HasIndex("TalentId");

                    b.ToTable("prerequisiteSize");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.PrerequisiteSkill", b =>
                {
                    b.Property<int>("PrerequisiteSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("prerequisite_skill_id");

                    b.Property<int?>("ClassId")
                        .HasColumnName("class_id");

                    b.Property<int?>("FeatId")
                        .HasColumnName("feat_id");

                    b.Property<int>("RequiredSkillId")
                        .HasColumnName("required_skill_id");

                    b.Property<int?>("TalentId")
                        .HasColumnName("talent_id");

                    b.HasKey("PrerequisiteSkillId");

                    b.HasIndex("ClassId");

                    b.HasIndex("FeatId");

                    b.HasIndex("RequiredSkillId");

                    b.HasIndex("TalentId");

                    b.ToTable("prerequisiteSkill");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.PrerequisiteSpecies", b =>
                {
                    b.Property<int>("PrerequisiteSpeciesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("prerequisite_species_id");

                    b.Property<int?>("ClassId")
                        .HasColumnName("class_id");

                    b.Property<int?>("FeatId")
                        .HasColumnName("feat_id");

                    b.Property<int>("RequiredSpeciesId")
                        .HasColumnName("required_species_id");

                    b.Property<int?>("TalentId")
                        .HasColumnName("talent_id");

                    b.HasKey("PrerequisiteSpeciesId");

                    b.HasIndex("ClassId");

                    b.HasIndex("FeatId");

                    b.HasIndex("RequiredSpeciesId");

                    b.HasIndex("TalentId");

                    b.ToTable("prerequisiteSpecies");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.PrerequisiteSpeciesTrait", b =>
                {
                    b.Property<int>("PrerequisiteTraitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("prerequisite_trait_id");

                    b.Property<int?>("ClassId")
                        .HasColumnName("class_id");

                    b.Property<int?>("FeatId")
                        .HasColumnName("feat_id");

                    b.Property<int>("RequiredTraitId")
                        .HasColumnName("required_trait_id");

                    b.Property<int?>("TalentId")
                        .HasColumnName("talent_id");

                    b.HasKey("PrerequisiteTraitId");

                    b.HasIndex("ClassId");

                    b.HasIndex("FeatId");

                    b.HasIndex("RequiredTraitId");

                    b.HasIndex("TalentId");

                    b.ToTable("prerequisiteSpeciesTrait");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.PrerequisiteTalent", b =>
                {
                    b.Property<int>("PrerequisiteTalentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("prerequisite_talent_id");

                    b.Property<int?>("ClassId")
                        .HasColumnName("class_id");

                    b.Property<int?>("FeatId")
                        .HasColumnName("feat_id");

                    b.Property<int>("RequiredTalentId")
                        .HasColumnName("required_talent_id");

                    b.Property<int?>("TalentId")
                        .HasColumnName("talent_id");

                    b.HasKey("PrerequisiteTalentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("FeatId");

                    b.HasIndex("RequiredTalentId");

                    b.HasIndex("TalentId");

                    b.ToTable("prerequisiteTalent");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.PrerequisiteTalentTree", b =>
                {
                    b.Property<int>("PrerequisiteTreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("prerequisite_tree_id");

                    b.Property<int?>("ClassId")
                        .HasColumnName("class_id");

                    b.Property<int?>("FeatId")
                        .HasColumnName("feat_id");

                    b.Property<int>("RequiredTreeId")
                        .HasColumnName("required_tree_id");

                    b.Property<int?>("TalentCount")
                        .HasColumnName("talent_count");

                    b.Property<int?>("TalentId")
                        .HasColumnName("talent_id");

                    b.HasKey("PrerequisiteTreeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("FeatId");

                    b.HasIndex("RequiredTreeId");

                    b.HasIndex("TalentId");

                    b.ToTable("prerequisiteTalentTree");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.ShieldTemplate", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("template_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.HasKey("TemplateId");

                    b.ToTable("shieldTemplate");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("size_id");

                    b.Property<decimal?>("CarryCapacityModifier")
                        .HasColumnName("carry_capacity_modifier");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<int?>("DexterityModifier")
                        .HasColumnName("dexterity_modifier");

                    b.Property<int?>("DroidHitpoints")
                        .HasColumnName("droid_hitpoints");

                    b.Property<int?>("DroidMultiplier")
                        .HasColumnName("droid_multiplier");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("ReflexModifier")
                        .HasColumnName("reflex_modifier");

                    b.Property<int?>("StarshipMultiplier")
                        .HasColumnName("starship_multiplier");

                    b.Property<int?>("StealthModifier")
                        .HasColumnName("stealth_modifier");

                    b.Property<int?>("StrengthModifier")
                        .HasColumnName("strength_modifier");

                    b.Property<int?>("ThresholdModifier")
                        .HasColumnName("threshold_modifier");

                    b.HasKey("SizeId");

                    b.ToTable("size");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("skill_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int?>("PageNumber")
                        .HasColumnName("page_number");

                    b.HasKey("SkillId");

                    b.ToTable("skill");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.SkillAction", b =>
                {
                    b.Property<int>("SkillActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("skill_action_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.HasKey("SkillActionId");

                    b.ToTable("skillAction");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Species", b =>
                {
                    b.Property<int>("SpeciesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("species_id");

                    b.Property<int?>("BaseSpeed")
                        .HasColumnName("base_speed");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<int?>("CharismaModifier")
                        .HasColumnName("charisma_modifier");

                    b.Property<int?>("ConstitutionModifier")
                        .HasColumnName("constitution_modifier");

                    b.Property<int?>("DexterityModifier")
                        .HasColumnName("dexterity_modifier");

                    b.Property<int?>("IntelligenceModifier")
                        .HasColumnName("intelligence_modifier");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.Property<int?>("SizeId")
                        .HasColumnName("size_id");

                    b.Property<int?>("StrengthModifier")
                        .HasColumnName("strength_modifier");

                    b.Property<int?>("WisdomModifier")
                        .HasColumnName("wisdom_modifier");

                    b.HasKey("SpeciesId");

                    b.HasIndex("BookId");

                    b.ToTable("species");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.SpeciesBonusFeatMap", b =>
                {
                    b.Property<int>("SpeciesBonusFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("species_bonus_feat_id");

                    b.Property<bool?>("Conditional")
                        .HasColumnName("conditional");

                    b.Property<int?>("FeatId")
                        .HasColumnName("feat_id");

                    b.Property<int?>("SkillId")
                        .HasColumnName("skill_id");

                    b.Property<int?>("SpeciesId")
                        .HasColumnName("species_id");

                    b.HasKey("SpeciesBonusFeatId");

                    b.ToTable("speciesBonusFeatMap");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.SpeciesLanguageMap", b =>
                {
                    b.Property<int>("SpeciesLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("species_language_id");

                    b.Property<int?>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<int?>("SpeciesId")
                        .HasColumnName("species_id");

                    b.HasKey("SpeciesLanguageId");

                    b.ToTable("speciesLanguageMap");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.SpeciesTrait", b =>
                {
                    b.Property<int>("SpeciesTraitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("species_trait_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("SpeciesTraitId");

                    b.ToTable("speciesTrait");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.SpeciesTraitMap", b =>
                {
                    b.Property<int>("SpeciesTraitMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("species_trait_map_id");

                    b.Property<int?>("SpeciesId")
                        .HasColumnName("species_id");

                    b.Property<int?>("SpeciesTraitId")
                        .HasColumnName("species_trait_id");

                    b.HasKey("SpeciesTraitMapId");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("SpeciesTraitId");

                    b.ToTable("speciesTraitMap");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.StarhipManeuver", b =>
                {
                    b.Property<int>("StarshipManeuverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("starship_maneuver_id");

                    b.Property<bool?>("AttackPattern")
                        .HasColumnName("attack_pattern");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<bool?>("Dogfight")
                        .HasColumnName("dogfight");

                    b.Property<bool?>("Force")
                        .HasColumnName("force");

                    b.Property<bool?>("Gunner")
                        .HasColumnName("gunner");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.HasKey("StarshipManeuverId");

                    b.HasIndex("BookId");

                    b.ToTable("starhipManeuver");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Talent", b =>
                {
                    b.Property<int>("TalentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("talent_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int?>("PageNumber")
                        .HasColumnName("page_number");

                    b.Property<int?>("TalentTreeId")
                        .HasColumnName("talent_tree_id");

                    b.HasKey("TalentId");

                    b.HasIndex("BookId");

                    b.HasIndex("TalentTreeId");

                    b.ToTable("talent");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.TalentTree", b =>
                {
                    b.Property<int>("TalentTreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("talent_tree_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int?>("PageNumber")
                        .HasColumnName("page_number");

                    b.HasKey("TalentTreeId");

                    b.ToTable("talentTree");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vehicle_id");

                    b.Property<int?>("AdditionalEmplacements")
                        .HasColumnName("additional_emplacements");

                    b.Property<int?>("AvailabilityId")
                        .HasColumnName("availability_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<int?>("CargoSpace")
                        .HasColumnName("cargo_space");

                    b.Property<bool?>("CarriedCraft")
                        .HasColumnName("carried_craft");

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost");

                    b.Property<int?>("Crew")
                        .HasColumnName("crew");

                    b.Property<int?>("DamageReduction")
                        .HasColumnName("damage_reduction");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<int?>("HitPoints")
                        .HasColumnName("hit_points");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.Property<int?>("Passengers")
                        .HasColumnName("passengers");

                    b.Property<int?>("ShieldRating")
                        .HasColumnName("shield_rating");

                    b.Property<int?>("SizeId")
                        .HasColumnName("size_id");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnName("vehicle_type_id");

                    b.HasKey("VehicleId");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("BookId");

                    b.HasIndex("SizeId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("vehicle");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.VehicleAmmunition", b =>
                {
                    b.Property<int>("VehicleAmmunitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vehicle_ammunition_id");

                    b.Property<int?>("AvailabilityId")
                        .HasColumnName("availability_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.HasKey("VehicleAmmunitionId");

                    b.HasIndex("BookId");

                    b.ToTable("vehicleAmmunition");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.VehicleSystem", b =>
                {
                    b.Property<int>("VehicleSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vehicle_system_id");

                    b.Property<int?>("AvailabilityId")
                        .HasColumnName("availability_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost");

                    b.Property<string>("Damage")
                        .HasColumnName("damage")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<int?>("EmplacementCost")
                        .HasColumnName("emplacement_cost");

                    b.Property<int?>("MaximumCount")
                        .HasColumnName("maximum_count");

                    b.Property<int?>("MaximumSizeId")
                        .HasColumnName("maximum_size_id");

                    b.Property<int?>("MinimumSizeId")
                        .HasColumnName("minimum_size_id");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.Property<int?>("ShieldRating")
                        .HasColumnName("shield_rating");

                    b.Property<int?>("VehicleAmmunitionId")
                        .HasColumnName("vehicle_ammunition_id");

                    b.Property<int?>("VehicleWeaponRangeId")
                        .HasColumnName("vehicle_weapon_range_id");

                    b.HasKey("VehicleSystemId");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("BookId");

                    b.HasIndex("MaximumSizeId");

                    b.HasIndex("MinimumSizeId");

                    b.HasIndex("VehicleAmmunitionId");

                    b.HasIndex("VehicleWeaponRangeId");

                    b.ToTable("vehicleSystem");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.VehicleSystemMap", b =>
                {
                    b.Property<int>("VehicleSystemMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vehicle_system_map_id");

                    b.Property<int?>("Count")
                        .HasColumnName("count");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(50);

                    b.Property<int?>("VehicleId")
                        .HasColumnName("vehicle_id");

                    b.Property<int?>("VehicleSystemId")
                        .HasColumnName("vehicle_system_id");

                    b.HasKey("VehicleSystemMapId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleSystemId");

                    b.ToTable("vehicleSystemMap");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.VehicleTemplate", b =>
                {
                    b.Property<int>("VehicleTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vehicle_template_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.HasKey("VehicleTemplateId");

                    b.HasIndex("BookId");

                    b.ToTable("vehicleTemplate");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.VehicleType", b =>
                {
                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vehicle_type_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("VehicleTypeId");

                    b.ToTable("vehicleType");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.VehicleWeaponRange", b =>
                {
                    b.Property<int>("WeaponRangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_range_id");

                    b.Property<int?>("CharacterLong")
                        .HasColumnName("character_long");

                    b.Property<int?>("CharacterMedium")
                        .HasColumnName("character_medium");

                    b.Property<int?>("CharacterPointBlank")
                        .HasColumnName("character_point_blank");

                    b.Property<int?>("CharacterShort")
                        .HasColumnName("character_short");

                    b.Property<int?>("StarshipLong")
                        .HasColumnName("starship_long");

                    b.Property<int?>("StarshipMedium")
                        .HasColumnName("starship_medium");

                    b.Property<int?>("StarshipPointBlank")
                        .HasColumnName("starship_point_blank");

                    b.Property<int?>("StarshipShort")
                        .HasColumnName("starship_short");

                    b.HasKey("WeaponRangeId");

                    b.ToTable("vehicleWeaponRange");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Weapon", b =>
                {
                    b.Property<int>("WeaponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_id");

                    b.Property<bool?>("Accurate")
                        .HasColumnName("accurate");

                    b.Property<int?>("AvailabilityId")
                        .HasColumnName("availability_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost");

                    b.Property<string>("Damage")
                        .HasColumnName("damage")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(1000);

                    b.Property<int?>("FireTypeId")
                        .HasColumnName("fire_type_id");

                    b.Property<bool?>("Inaccurate")
                        .HasColumnName("inaccurate");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.Property<bool?>("Rare")
                        .HasColumnName("rare");

                    b.Property<int?>("SizeId")
                        .HasColumnName("size_id");

                    b.Property<int?>("StunTypeId")
                        .HasColumnName("stun_type_id");

                    b.Property<int?>("WeaponCategoryId")
                        .HasColumnName("weapon_category_id");

                    b.Property<decimal?>("Weight")
                        .HasColumnName("weight");

                    b.HasKey("WeaponId");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("BookId");

                    b.HasIndex("FireTypeId");

                    b.HasIndex("SizeId");

                    b.HasIndex("StunTypeId");

                    b.HasIndex("WeaponCategoryId");

                    b.ToTable("weapon");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.WeaponAmmunition", b =>
                {
                    b.Property<int>("WeaponAmmunitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_ammunition_id");

                    b.Property<int?>("AvailabilityId")
                        .HasColumnName("availability_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.Property<decimal?>("Weight")
                        .HasColumnName("weight");

                    b.HasKey("WeaponAmmunitionId");

                    b.ToTable("weaponAmmunition");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.WeaponAmmunitionMap", b =>
                {
                    b.Property<int>("WeaponAmmunitionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_ammunition_type_id");

                    b.Property<int>("Capacity")
                        .HasColumnName("capacity");

                    b.Property<int?>("WeaponAmmunitionId")
                        .HasColumnName("weapon_ammunition_id");

                    b.Property<int?>("WeaponId")
                        .HasColumnName("weapon_id");

                    b.HasKey("WeaponAmmunitionTypeId");

                    b.HasIndex("WeaponAmmunitionId");

                    b.HasIndex("WeaponId");

                    b.ToTable("weaponAmmunitionMap");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.WeaponCategory", b =>
                {
                    b.Property<int>("WeaponCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_category_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("WeaponRangeId")
                        .HasColumnName("weapon_range_id");

                    b.HasKey("WeaponCategoryId");

                    b.HasIndex("WeaponRangeId");

                    b.ToTable("weaponCategory");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.WeaponDamageMap", b =>
                {
                    b.Property<int>("WeaponDamageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_damage_id");

                    b.Property<int?>("DamageTypeId")
                        .HasColumnName("damage_type_id");

                    b.Property<int?>("WeaponId")
                        .HasColumnName("weapon_id");

                    b.HasKey("WeaponDamageId");

                    b.HasIndex("DamageTypeId");

                    b.HasIndex("WeaponId");

                    b.ToTable("weaponDamageMap");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.WeaponDamageType", b =>
                {
                    b.Property<int>("DamageTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("damage_type_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("DamageTypeId");

                    b.ToTable("weaponDamageType");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.WeaponFireType", b =>
                {
                    b.Property<int>("FireTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fire_type_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("FireTypeId");

                    b.ToTable("weaponFireType");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.WeaponRange", b =>
                {
                    b.Property<int>("WeaponRangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_range_id");

                    b.Property<int?>("Long")
                        .HasColumnName("long");

                    b.Property<int?>("Medium")
                        .HasColumnName("medium");

                    b.Property<int?>("PointBlank")
                        .HasColumnName("point_blank");

                    b.Property<int?>("Short")
                        .HasColumnName("short");

                    b.Property<int?>("WeaponCategoryId")
                        .HasColumnName("weapon_category_id");

                    b.HasKey("WeaponRangeId");

                    b.ToTable("weaponRange");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.WeaponStunType", b =>
                {
                    b.Property<int>("StunTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("stun_type_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("StunTypeId");

                    b.ToTable("weaponStunType");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.WeaponTemplate", b =>
                {
                    b.Property<int>("WeaponTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_template_id");

                    b.Property<int?>("BookId")
                        .HasColumnName("book_id");

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("DescriptionShort")
                        .HasColumnName("description_short")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("Page")
                        .HasColumnName("page");

                    b.HasKey("WeaponTemplateId");

                    b.HasIndex("BookId");

                    b.ToTable("weaponTemplate");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Armour", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.ArmourType", "ArmourType")
                        .WithMany("Armour")
                        .HasForeignKey("ArmourTypeId")
                        .HasConstraintName("FK_armour_armourType");

                    b.HasOne("StarWarsSagaEdition.Models.Availability", "Availability")
                        .WithMany("Armour")
                        .HasForeignKey("AvailabilityId")
                        .HasConstraintName("FK_armour_availability");

                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("Armour")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_armour_book");

                    b.HasOne("StarWarsSagaEdition.Models.ArmourHelmet", "Helmet")
                        .WithMany("Armour")
                        .HasForeignKey("HelmetId")
                        .HasConstraintName("FK_armour_armourHelmet");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.ArmourTemplate", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("ArmourTemplate")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_armourTemplate_book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Beast", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Availability", "Availability")
                        .WithMany("Beast")
                        .HasForeignKey("AvailabilityId")
                        .HasConstraintName("FK_beasts_availability");

                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("Beast")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_beasts_book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Character", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("Character")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_characters_book");

                    b.HasOne("StarWarsSagaEdition.Models.Species", "Species")
                        .WithMany("Character")
                        .HasForeignKey("SpeciesId")
                        .HasConstraintName("FK_characters_species");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Class", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("Class")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_class_book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.ClassBonusFeatMap", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("ClassBonusFeatMap")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_classBonusFeat_book");

                    b.HasOne("StarWarsSagaEdition.Models.Class", "Class")
                        .WithMany("ClassBonusFeatMap")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_classBonusFeat_class");

                    b.HasOne("StarWarsSagaEdition.Models.Feat", "Feat")
                        .WithMany("ClassBonusFeatMap")
                        .HasForeignKey("FeatId")
                        .HasConstraintName("FK_classBonusFeat_feat");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.ClassPrestigeSpecial", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("ClassPrestigeSpecial")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_classPrestigeSpecial_book");

                    b.HasOne("StarWarsSagaEdition.Models.Class", "Class")
                        .WithMany("ClassPrestigeSpecial")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_classPrestigeSpecial_class");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.ClassSkillMap", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Class", "Class")
                        .WithMany("ClassSkillMap")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_classSkill_class");

                    b.HasOne("StarWarsSagaEdition.Models.Skill", "Skill")
                        .WithMany("ClassSkillMap")
                        .HasForeignKey("SkillId")
                        .HasConstraintName("FK_classSkill_skill");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.ClassTalentTreeMap", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Class", "Class")
                        .WithMany("ClassTalentTreeMap")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_classTalentTree_class");

                    b.HasOne("StarWarsSagaEdition.Models.TalentTree", "TalentTree")
                        .WithMany("ClassTalentTreeMap")
                        .HasForeignKey("TalentTreeId")
                        .HasConstraintName("FK_classTalentTree_talentTree");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Droid", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Availability", "Availability")
                        .WithMany("Droid")
                        .HasForeignKey("AvailabilityId")
                        .HasConstraintName("FK_droid_availability");

                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("Droid")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_droid_book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.DroidSystem", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Droid", "Droid")
                        .WithMany("DroidSystem")
                        .HasForeignKey("DroidId")
                        .HasConstraintName("FK_droidSystem_droid");

                    b.HasOne("StarWarsSagaEdition.Models.EquipmentDroid", "EquipmentDroid")
                        .WithMany("DroidSystem")
                        .HasForeignKey("EquipmentDroidId")
                        .HasConstraintName("FK_droidSystem_equipmentDroid");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Equipment", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Availability", "Availability")
                        .WithMany("Equipment")
                        .HasForeignKey("AvailabilityId")
                        .HasConstraintName("FK_equipment_availability");

                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("Equipment")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_equipment_book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.EquipmentCybernetic", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Availability", "Availability")
                        .WithMany("EquipmentCybernetic")
                        .HasForeignKey("AvailabilityId")
                        .HasConstraintName("FK_equipmentCybernetic_availability");

                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("EquipmentCybernetic")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_equipmentCybernetic_book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.EquipmentDroid", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Availability", "Availability")
                        .WithMany("EquipmentDroid")
                        .HasForeignKey("AvailabilityId")
                        .HasConstraintName("FK_equipmentDroid_availability");

                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("EquipmentDroid")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_equipmentDroid_book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.EquipmentUpgrade", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Availability", "Availability")
                        .WithMany("EquipmentUpgrade")
                        .HasForeignKey("AvailabilityId")
                        .HasConstraintName("FK_equipmentUpgrade_availability");

                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("EquipmentUpgrade")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_equipmentUpgrade_book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Feat", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("Feat")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_feat_book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.ForcePower", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("ForcePower")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_forcePower_book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.ForceSecret", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("ForceSecret")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_forceSecret_book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.ForceTechnique", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("ForceTechnique")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_forceTechnique_book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Index", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("Index")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_index_book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.MedicalSecret", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("MedicalSecret")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_medicalSecret_book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Planet", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("Planet")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_planet_book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.PrerequisiteAbility", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Class", "Class")
                        .WithMany("PrerequisiteAbility")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_prerequisiteAbility_class");

                    b.HasOne("StarWarsSagaEdition.Models.Feat", "Feat")
                        .WithMany("PrerequisiteAbility")
                        .HasForeignKey("FeatId")
                        .HasConstraintName("FK_prerequisiteAbility_feat");

                    b.HasOne("StarWarsSagaEdition.Models.Ability", "RequiredAbility")
                        .WithMany("PrerequisiteAbility")
                        .HasForeignKey("RequiredAbilityId")
                        .HasConstraintName("FK_prerequisiteAbility_ability");

                    b.HasOne("StarWarsSagaEdition.Models.Talent", "Talent")
                        .WithMany("PrerequisiteAbility")
                        .HasForeignKey("TalentId")
                        .HasConstraintName("FK_prerequisiteAbility_talent");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.PrerequisiteFeat", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Class", "Class")
                        .WithMany("PrerequisiteFeat")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_prerequisiteFeat_class");

                    b.HasOne("StarWarsSagaEdition.Models.Feat", "Feat")
                        .WithMany("PrerequisiteFeatFeat")
                        .HasForeignKey("FeatId")
                        .HasConstraintName("FK_prerequisiteFeat_feat");

                    b.HasOne("StarWarsSagaEdition.Models.Feat", "RequiredFeat")
                        .WithMany("PrerequisiteFeatRequiredFeat")
                        .HasForeignKey("RequiredFeatId")
                        .HasConstraintName("FK_prerequisiteFeat_feat_required");

                    b.HasOne("StarWarsSagaEdition.Models.Talent", "Talent")
                        .WithMany("PrerequisiteFeat")
                        .HasForeignKey("TalentId")
                        .HasConstraintName("FK_prerequisiteFeat_talent");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.PrerequisiteLevel", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Class", "Class")
                        .WithMany("PrerequisiteLevel")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_prerequisiteLevel_class");

                    b.HasOne("StarWarsSagaEdition.Models.Feat", "Feat")
                        .WithMany("PrerequisiteLevel")
                        .HasForeignKey("FeatId")
                        .HasConstraintName("FK_prerequisiteLevel_feat");

                    b.HasOne("StarWarsSagaEdition.Models.Level", "RequiredLevel")
                        .WithMany("PrerequisiteLevel")
                        .HasForeignKey("RequiredLevelId")
                        .HasConstraintName("FK_prerequisiteLevel_level");

                    b.HasOne("StarWarsSagaEdition.Models.Talent", "Talent")
                        .WithMany("PrerequisiteLevel")
                        .HasForeignKey("TalentId")
                        .HasConstraintName("FK_prerequisiteLevel_talent");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.PrerequisiteSize", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Class", "Class")
                        .WithMany("PrerequisiteSize")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_prerequisiteSize_class");

                    b.HasOne("StarWarsSagaEdition.Models.Feat", "Feat")
                        .WithMany("PrerequisiteSize")
                        .HasForeignKey("FeatId")
                        .HasConstraintName("FK_prerequisiteSize_feat");

                    b.HasOne("StarWarsSagaEdition.Models.Size", "RequiredSide")
                        .WithMany("PrerequisiteSize")
                        .HasForeignKey("RequiredSideId")
                        .HasConstraintName("FK_prerequisiteSize_size");

                    b.HasOne("StarWarsSagaEdition.Models.Talent", "Talent")
                        .WithMany("PrerequisiteSize")
                        .HasForeignKey("TalentId")
                        .HasConstraintName("FK_prerequisiteSize_talent");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.PrerequisiteSkill", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Class", "Class")
                        .WithMany("PrerequisiteSkill")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_prerequisiteSkill_class");

                    b.HasOne("StarWarsSagaEdition.Models.Feat", "Feat")
                        .WithMany("PrerequisiteSkill")
                        .HasForeignKey("FeatId")
                        .HasConstraintName("FK_prerequisiteSkill_feat");

                    b.HasOne("StarWarsSagaEdition.Models.Skill", "RequiredSkill")
                        .WithMany("PrerequisiteSkill")
                        .HasForeignKey("RequiredSkillId")
                        .HasConstraintName("FK_prerequisiteSkill_skill");

                    b.HasOne("StarWarsSagaEdition.Models.Talent", "Talent")
                        .WithMany("PrerequisiteSkill")
                        .HasForeignKey("TalentId")
                        .HasConstraintName("FK_prerequisiteSkill_talent");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.PrerequisiteSpecies", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Class", "Class")
                        .WithMany("PrerequisiteSpecies")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_prerequisiteSpecies_class");

                    b.HasOne("StarWarsSagaEdition.Models.Feat", "Feat")
                        .WithMany("PrerequisiteSpecies")
                        .HasForeignKey("FeatId")
                        .HasConstraintName("FK_prerequisiteSpecies_feat");

                    b.HasOne("StarWarsSagaEdition.Models.Species", "RequiredSpecies")
                        .WithMany("PrerequisiteSpecies")
                        .HasForeignKey("RequiredSpeciesId")
                        .HasConstraintName("FK_prerequisiteSpecies_species");

                    b.HasOne("StarWarsSagaEdition.Models.Talent", "Talent")
                        .WithMany("PrerequisiteSpecies")
                        .HasForeignKey("TalentId")
                        .HasConstraintName("FK_prerequisiteSpecies_talent");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.PrerequisiteSpeciesTrait", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Class", "Class")
                        .WithMany("PrerequisiteSpeciesTrait")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_prerequisiteSpeciesTrait_class");

                    b.HasOne("StarWarsSagaEdition.Models.Feat", "Feat")
                        .WithMany("PrerequisiteSpeciesTrait")
                        .HasForeignKey("FeatId")
                        .HasConstraintName("FK_prerequisiteSpeciesTrait_feat");

                    b.HasOne("StarWarsSagaEdition.Models.SpeciesTrait", "RequiredTrait")
                        .WithMany("PrerequisiteSpeciesTrait")
                        .HasForeignKey("RequiredTraitId")
                        .HasConstraintName("FK_prerequisiteSpeciesTrait_speciesTrait");

                    b.HasOne("StarWarsSagaEdition.Models.Talent", "Talent")
                        .WithMany("PrerequisiteSpeciesTrait")
                        .HasForeignKey("TalentId")
                        .HasConstraintName("FK_prerequisiteSpeciesTrait_talent");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.PrerequisiteTalent", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Class", "Class")
                        .WithMany("PrerequisiteTalent")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_prerequisiteTalent_class");

                    b.HasOne("StarWarsSagaEdition.Models.Feat", "Feat")
                        .WithMany("PrerequisiteTalent")
                        .HasForeignKey("FeatId")
                        .HasConstraintName("FK_prerequisiteTalent_feat");

                    b.HasOne("StarWarsSagaEdition.Models.Talent", "RequiredTalent")
                        .WithMany("PrerequisiteTalentRequiredTalent")
                        .HasForeignKey("RequiredTalentId")
                        .HasConstraintName("FK_prerequisiteTalent_talent_required");

                    b.HasOne("StarWarsSagaEdition.Models.Talent", "Talent")
                        .WithMany("PrerequisiteTalentTalent")
                        .HasForeignKey("TalentId")
                        .HasConstraintName("FK_prerequisiteTalent_talent");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.PrerequisiteTalentTree", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Class", "Class")
                        .WithMany("PrerequisiteTalentTree")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_prerequisiteTalentTree_class");

                    b.HasOne("StarWarsSagaEdition.Models.Feat", "Feat")
                        .WithMany("PrerequisiteTalentTree")
                        .HasForeignKey("FeatId")
                        .HasConstraintName("FK_prerequisiteTalentTree_feat");

                    b.HasOne("StarWarsSagaEdition.Models.TalentTree", "RequiredTree")
                        .WithMany("PrerequisiteTalentTree")
                        .HasForeignKey("RequiredTreeId")
                        .HasConstraintName("FK_prerequisiteTalentTree_talentTree");

                    b.HasOne("StarWarsSagaEdition.Models.Talent", "Talent")
                        .WithMany("PrerequisiteTalentTree")
                        .HasForeignKey("TalentId")
                        .HasConstraintName("FK_prerequisiteTalentTree_talent");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Species", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("Species")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_species_book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.SpeciesTraitMap", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Species", "Species")
                        .WithMany("SpeciesTraitMap")
                        .HasForeignKey("SpeciesId")
                        .HasConstraintName("FK_speciesTraitMap_species");

                    b.HasOne("StarWarsSagaEdition.Models.SpeciesTrait", "SpeciesTrait")
                        .WithMany("SpeciesTraitMap")
                        .HasForeignKey("SpeciesTraitId")
                        .HasConstraintName("FK_speciesTraitMap_speciesTrait");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.StarhipManeuver", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("StarhipManeuver")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_starhipManeuver_book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Talent", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("Talent")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_talent_book");

                    b.HasOne("StarWarsSagaEdition.Models.TalentTree", "TalentTree")
                        .WithMany("Talent")
                        .HasForeignKey("TalentTreeId")
                        .HasConstraintName("FK_talent_talentTree");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Vehicle", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Availability", "Availability")
                        .WithMany("Vehicle")
                        .HasForeignKey("AvailabilityId")
                        .HasConstraintName("FK_vehicle_availability");

                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("Vehicle")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_vehicle_book");

                    b.HasOne("StarWarsSagaEdition.Models.Size", "Size")
                        .WithMany("Vehicle")
                        .HasForeignKey("SizeId")
                        .HasConstraintName("FK_vehicle_size");

                    b.HasOne("StarWarsSagaEdition.Models.VehicleType", "VehicleType")
                        .WithMany("Vehicle")
                        .HasForeignKey("VehicleTypeId")
                        .HasConstraintName("FK_vehicle_vehicleType");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.VehicleAmmunition", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("VehicleAmmunition")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_vehicleAmmunition_book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.VehicleSystem", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Availability", "Availability")
                        .WithMany("VehicleSystem")
                        .HasForeignKey("AvailabilityId")
                        .HasConstraintName("FK_vehicleSystem_availability");

                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("VehicleSystem")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_vehicleEmplacement_book");

                    b.HasOne("StarWarsSagaEdition.Models.Size", "MaximumSize")
                        .WithMany("VehicleSystemMaximumSize")
                        .HasForeignKey("MaximumSizeId")
                        .HasConstraintName("FK_vehicleSystem_size1");

                    b.HasOne("StarWarsSagaEdition.Models.Size", "MinimumSize")
                        .WithMany("VehicleSystemMinimumSize")
                        .HasForeignKey("MinimumSizeId")
                        .HasConstraintName("FK_vehicleSystem_size");

                    b.HasOne("StarWarsSagaEdition.Models.VehicleAmmunition", "VehicleAmmunition")
                        .WithMany("VehicleSystem")
                        .HasForeignKey("VehicleAmmunitionId")
                        .HasConstraintName("FK_vehicleSystem_vehicleAmmunition");

                    b.HasOne("StarWarsSagaEdition.Models.VehicleWeaponRange", "VehicleWeaponRange")
                        .WithMany("VehicleSystem")
                        .HasForeignKey("VehicleWeaponRangeId")
                        .HasConstraintName("FK_vehicleSystem_vehicleWeaponRange");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.VehicleSystemMap", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleSystemMap")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_vehicleSystemMap_vehicle");

                    b.HasOne("StarWarsSagaEdition.Models.VehicleSystem", "VehicleSystem")
                        .WithMany("VehicleSystemMap")
                        .HasForeignKey("VehicleSystemId")
                        .HasConstraintName("FK_vehicleSystemMap_vehicleSystem");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.VehicleTemplate", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("VehicleTemplate")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_vehicleTemplate_book");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.Weapon", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Availability", "Availability")
                        .WithMany("Weapon")
                        .HasForeignKey("AvailabilityId")
                        .HasConstraintName("FK_weapon_availability");

                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("Weapon")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_weapon_book");

                    b.HasOne("StarWarsSagaEdition.Models.WeaponFireType", "FireType")
                        .WithMany("Weapon")
                        .HasForeignKey("FireTypeId")
                        .HasConstraintName("FK_weapon_weaponFireType");

                    b.HasOne("StarWarsSagaEdition.Models.Size", "Size")
                        .WithMany("Weapon")
                        .HasForeignKey("SizeId")
                        .HasConstraintName("FK_weapon_size");

                    b.HasOne("StarWarsSagaEdition.Models.WeaponStunType", "StunType")
                        .WithMany("Weapon")
                        .HasForeignKey("StunTypeId")
                        .HasConstraintName("FK_weapon_weaponStunType");

                    b.HasOne("StarWarsSagaEdition.Models.WeaponCategory", "WeaponCategory")
                        .WithMany("Weapon")
                        .HasForeignKey("WeaponCategoryId")
                        .HasConstraintName("FK_weapon_weaponCategory");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.WeaponAmmunitionMap", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.WeaponAmmunition", "WeaponAmmunition")
                        .WithMany("WeaponAmmunitionMap")
                        .HasForeignKey("WeaponAmmunitionId")
                        .HasConstraintName("FK_weaponAmmunitionMap_weaponAmmunition");

                    b.HasOne("StarWarsSagaEdition.Models.Weapon", "Weapon")
                        .WithMany("WeaponAmmunitionMap")
                        .HasForeignKey("WeaponId")
                        .HasConstraintName("FK_weaponAmmunitionMap_weapon");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.WeaponCategory", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.WeaponRange", "WeaponRange")
                        .WithMany("WeaponCategory")
                        .HasForeignKey("WeaponRangeId")
                        .HasConstraintName("FK_weaponCategory_weaponRange");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.WeaponDamageMap", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.WeaponDamageType", "DamageType")
                        .WithMany("WeaponDamageMap")
                        .HasForeignKey("DamageTypeId")
                        .HasConstraintName("FK_weaponDamageMap_weaponDamageType");

                    b.HasOne("StarWarsSagaEdition.Models.Weapon", "Weapon")
                        .WithMany("WeaponDamageMap")
                        .HasForeignKey("WeaponId")
                        .HasConstraintName("FK_weaponDamageMap_weapon");
                });

            modelBuilder.Entity("StarWarsSagaEdition.Models.WeaponTemplate", b =>
                {
                    b.HasOne("StarWarsSagaEdition.Models.Book", "Book")
                        .WithMany("WeaponTemplate")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_weaponTemplate_book");
                });
#pragma warning restore 612, 618
        }
    }
}
